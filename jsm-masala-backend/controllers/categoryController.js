const Category = require('../models/Category');
const mongoose = require('mongoose'); // Needed for ObjectId validation

// @desc    Create a new category
// @route   POST /api/categories
// @access  Private/Admin
const createCategory = async (req, res, next) => {
  const { name } = req.body;

  // Validation middleware already handled required 'name' field
  // but we double-check here
  if (!name) {
    res.status(400); // Should be caught by validation, but good backup
    return next(new Error('Category name is required'));
  }

  try {
    // Check if category name already exists (case-insensitive check might be better)
    const categoryExists = await Category.findOne({
      name: { $regex: `^${name}$`, $options: 'i' }, // Case-insensitive check
    });

    if (categoryExists) {
      res.status(400);
      return next(new Error(`Category '${name}' already exists`));
    }

    // Create category (slug is auto-generated by pre-save hook)
    const category = await Category.create({ name });

    res.status(201).json(category); // 201 Created
  } catch (error) {
    next(error); // Pass errors to central handler
  }
};

// @desc    Get all categories
// @route   GET /api/categories
// @access  Public
const getCategories = async (req, res, next) => {
  try {
    // Fetch all categories, sort alphabetically by name
    const categories = await Category.find({}).sort({ name: 1 });
    res.json(categories);
  } catch (error) {
    next(error);
  }
};

// @desc    Get single category by slug or ID
// @route   GET /api/categories/:slugOrId
// @access  Public
const getCategory = async (req, res, next) => {
  const slugOrId = req.params.slugOrId;
  try {
    let category;
    // Try finding by slug first (more user-friendly URLs)
    category = await Category.findOne({ slug: slugOrId.toLowerCase() });

    // If not found by slug, try finding by ID if it's a valid ObjectId
    if (!category && mongoose.Types.ObjectId.isValid(slugOrId)) {
      category = await Category.findById(slugOrId);
    }

    if (category) {
      res.json(category);
    } else {
      res.status(404); // Not Found
      return next(new Error('Category not found'));
    }
  } catch (error) {
    next(error);
  }
};

// @desc    Update a category by ID
// @route   PUT /api/categories/:id
// @access  Private/Admin
const updateCategory = async (req, res, next) => {
  const { name } = req.body;
  const categoryId = req.params.id;

  // ID format validation
  if (!mongoose.Types.ObjectId.isValid(categoryId)) {
    res.status(400);
    return next(new Error('Invalid Category ID format'));
  }
  // Name validation handled by middleware

  try {
    // Find the category by ID
    const category = await Category.findById(categoryId);

    if (!category) {
      res.status(404);
      return next(new Error('Category not found'));
    }

    // Check if the new name already exists (and isn't the current category's name)
    if (name && name !== category.name) {
      const nameExists = await Category.findOne({
        name: { $regex: `^${name}$`, $options: 'i' },
        _id: { $ne: categoryId }, // Exclude current category from check
      });
      if (nameExists) {
        res.status(400);
        return next(new Error(`Category name '${name}' already in use`));
      }
      category.name = name; // Update name; slug will update via pre-save hook
    } else if (!name) {
      // If name wasn't provided in the body (but validation passed?),
      // this shouldn't happen, but prevents accidentally clearing the name.
      res.status(400);
      return next(new Error('Category name is required for update'));
    }

    // Save the updated category (triggers pre-save hook for slug)
    const updatedCategory = await category.save();
    res.json(updatedCategory);

  } catch (error) {
    next(error);
  }
};

// @desc    Delete a category by ID
// @route   DELETE /api/categories/:id
// @access  Private/Admin
const deleteCategory = async (req, res, next) => {
  const categoryId = req.params.id;

  if (!mongoose.Types.ObjectId.isValid(categoryId)) {
    res.status(400);
    return next(new Error('Invalid Category ID format'));
  }

  try {
    const category = await Category.findById(categoryId);

    if (!category) {
      res.status(404);
      return next(new Error('Category not found'));
    }

    // --- Optional Check: Prevent deletion if products use this category ---
    // const Product = require('../models/Product'); // Import Product model
    // const productCount = await Product.countDocuments({ category: categoryId });
    // if (productCount > 0) {
    //   res.status(400);
    //   return next(new Error(`Cannot delete category '${category.name}' as it is used by ${productCount} product(s).`));
    // }
    // --- End Optional Check ---

    // Delete the category
    await category.deleteOne(); // Use deleteOne on the document instance

    res.json({ message: `Category '${category.name}' removed successfully` });
  } catch (error) {
    next(error);
  }
};


module.exports = {
  createCategory,
  getCategories,
  getCategory,
  updateCategory,
  deleteCategory,
};